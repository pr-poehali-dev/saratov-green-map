import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';

interface PlantData {
  id: string;
  type: 'tree' | 'bush';
  species: string;
  age: number;
  crownDiameter: number;
  height: number;
  damages: string;
  healthStatus: 'healthy' | 'satisfactory' | 'unsatisfactory';
  position: [number, number];
}

interface LawnData {
  id: string;
  area: number;
  grassType: string;
  healthStatus: 'healthy' | 'satisfactory' | 'unsatisfactory';
  positions: [number, number][];
}

const getHealthStatusLabel = (status: 'healthy' | 'satisfactory' | 'unsatisfactory') => {
  switch (status) {
    case 'healthy': return '–ó–¥–æ—Ä–æ–≤–æ–µ';
    case 'satisfactory': return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ';
    case 'unsatisfactory': return '–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ';
    default: return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }
};

const getHealthStatusVariant = (status: 'healthy' | 'satisfactory' | 'unsatisfactory'): "default" | "secondary" | "destructive" => {
  switch (status) {
    case 'healthy': return 'default';
    case 'satisfactory': return 'secondary';
    case 'unsatisfactory': return 'destructive';
    default: return 'default';
  }
};

const TablePage = () => {
  const [plants, setPlants] = useState<PlantData[]>([]);
  const [lawns, setLawns] = useState<LawnData[]>([]);
  const navigate = useNavigate();

  useEffect(() => {
    const storedPlants = localStorage.getItem('saratov-plants');
    const storedLawns = localStorage.getItem('saratov-lawns');
    
    if (storedPlants) {
      setPlants(JSON.parse(storedPlants));
    }

    if (storedLawns) {
      setLawns(JSON.parse(storedLawns));
    }
  }, []);

  const healthyPlants = plants.filter(p => p.healthStatus === 'healthy').length;
  const satisfactoryPlants = plants.filter(p => p.healthStatus === 'satisfactory').length;
  const unsatisfactoryPlants = plants.filter(p => p.healthStatus === 'unsatisfactory').length;

  const healthyLawns = lawns.filter(l => l.healthStatus === 'healthy').length;
  const satisfactoryLawns = lawns.filter(l => l.healthStatus === 'satisfactory').length;
  const unsatisfactoryLawns = lawns.filter(l => l.healthStatus === 'unsatisfactory').length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-green-100 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-primary flex items-center gap-3">
              <Icon name="Table" size={32} />
              –†–µ–µ—Å—Ç—Ä –∑–µ–ª—ë–Ω—ã—Ö –Ω–∞—Å–∞–∂–¥–µ–Ω–∏–π
            </h1>
            <p className="text-muted-foreground mt-2">–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</p>
          </div>
          <Button onClick={() => navigate('/')} variant="outline" className="flex items-center gap-2">
            <Icon name="Map" size={18} />
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ
          </Button>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-muted-foreground">–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-primary">{plants.length + lawns.length}</div>
              <p className="text-xs text-muted-foreground mt-1">
                {plants.length} —Ä–∞—Å—Ç–µ–Ω–∏–π, {lawns.length} –≥–∞–∑–æ–Ω–æ–≤
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-muted-foreground">–ó–¥–æ—Ä–æ–≤—ã–µ</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-green-600">{healthyPlants + healthyLawns}</div>
              <p className="text-xs text-muted-foreground mt-1">
                –í –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-muted-foreground">–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-red-600">{unsatisfactoryPlants + unsatisfactoryLawns}</div>
              <p className="text-xs text-muted-foreground mt-1">
                –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
              </p>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="plants" className="w-full">
          <TabsList className="grid w-full max-w-md grid-cols-2">
            <TabsTrigger value="plants" className="flex items-center gap-2">
              <Icon name="Trees" size={16} />
              –†–∞—Å—Ç–µ–Ω–∏—è ({plants.length})
            </TabsTrigger>
            <TabsTrigger value="lawns" className="flex items-center gap-2">
              <Icon name="Square" size={16} />
              –ì–∞–∑–æ–Ω—ã ({lawns.length})
            </TabsTrigger>
          </TabsList>

          <TabsContent value="plants" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>–î–µ—Ä–µ–≤—å—è –∏ –∫—É—Å—Ç–∞—Ä–Ω–∏–∫–∏</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="rounded-md border overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead className="w-[50px]">–¢–∏–ø</TableHead>
                        <TableHead>–í–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è</TableHead>
                        <TableHead>–í–æ–∑—Ä–∞—Å—Ç</TableHead>
                        <TableHead>–í—ã—Å–æ—Ç–∞</TableHead>
                        <TableHead>–î–∏–∞–º–µ—Ç—Ä –∫—Ä–æ–Ω—ã</TableHead>
                        <TableHead>–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è</TableHead>
                        <TableHead>–°–æ—Å—Ç–æ—è–Ω–∏–µ</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {plants.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={7} className="text-center text-muted-foreground py-8">
                            –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
                          </TableCell>
                        </TableRow>
                      ) : (
                        plants.map((plant) => (
                          <TableRow key={plant.id}>
                            <TableCell className="text-2xl">
                              {plant.type === 'tree' ? 'üå≥' : 'üåø'}
                            </TableCell>
                            <TableCell className="font-medium">{plant.species}</TableCell>
                            <TableCell>{plant.age} –ª–µ—Ç</TableCell>
                            <TableCell>{plant.height} –º</TableCell>
                            <TableCell>{plant.crownDiameter} –º</TableCell>
                            <TableCell className="max-w-[200px] truncate">{plant.damages || '‚Äî'}</TableCell>
                            <TableCell>
                              <Badge variant={getHealthStatusVariant(plant.healthStatus)}>
                                {getHealthStatusLabel(plant.healthStatus)}
                              </Badge>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="lawns" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>–ì–∞–∑–æ–Ω—ã</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="rounded-md border overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>‚Ññ</TableHead>
                        <TableHead>–¢–∏–ø —Ç—Ä–∞–≤—ã</TableHead>
                        <TableHead>–ü–ª–æ—â–∞–¥—å</TableHead>
                        <TableHead>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫</TableHead>
                        <TableHead>–°–æ—Å—Ç–æ—è–Ω–∏–µ</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {lawns.length === 0 ? (
                        <TableRow>
                          <TableCell colSpan={5} className="text-center text-muted-foreground py-8">
                            –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–∞–∑–æ–Ω–∞—Ö
                          </TableCell>
                        </TableRow>
                      ) : (
                        lawns.map((lawn, index) => (
                          <TableRow key={lawn.id}>
                            <TableCell className="font-medium">{index + 1}</TableCell>
                            <TableCell>{lawn.grassType}</TableCell>
                            <TableCell>{lawn.area} –º¬≤</TableCell>
                            <TableCell>{lawn.positions.length} —Ç–æ—á–µ–∫</TableCell>
                            <TableCell>
                              <Badge variant={getHealthStatusVariant(lawn.healthStatus)}>
                                {getHealthStatusLabel(lawn.healthStatus)}
                              </Badge>
                            </TableCell>
                          </TableRow>
                        ))
                      )}
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default TablePage;
