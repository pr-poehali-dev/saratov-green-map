import { useState, useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Marker, Popup, Polygon, useMapEvents } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';
import { Badge } from '@/components/ui/badge';
import { useNavigate } from 'react-router-dom';

const getHealthColor = (status: 'healthy' | 'satisfactory' | 'unsatisfactory') => {
  switch (status) {
    case 'healthy': return '#22c55e';
    case 'satisfactory': return '#eab308';
    case 'unsatisfactory': return '#ef4444';
    default: return '#22c55e';
  }
};

const createPlantIcon = (type: 'tree' | 'bush', healthStatus: 'healthy' | 'satisfactory' | 'unsatisfactory') => {
  const emoji = type === 'tree' ? 'üå≥' : 'üåø';
  const color = getHealthColor(healthStatus);
  const size = type === 'tree' ? 32 : 28;
  
  return L.divIcon({
    html: `<div style="position: relative;">
      <div style="font-size: ${size}px;">${emoji}</div>
      <div style="position: absolute; bottom: -4px; left: 50%; transform: translateX(-50%); width: 12px; height: 12px; background-color: ${color}; border: 2px solid white; border-radius: 50%; box-shadow: 0 2px 4px rgba(0,0,0,0.3);"></div>
    </div>`,
    className: 'custom-marker',
    iconSize: [size, size + 12],
    iconAnchor: [size / 2, size + 12]
  });
};

interface PlantData {
  id: string;
  type: 'tree' | 'bush';
  species: string;
  age: number;
  crownDiameter: number;
  height: number;
  damages: string;
  healthStatus: 'healthy' | 'satisfactory' | 'unsatisfactory';
  position: [number, number];
}

interface LawnData {
  id: string;
  area: number;
  grassType: string;
  healthStatus: 'healthy' | 'satisfactory' | 'unsatisfactory';
  positions: [number, number][];
}

const initialPlants: PlantData[] = [
  {
    id: '1',
    type: 'tree',
    species: '–ö–ª–µ–Ω —è—Å–µ–Ω–µ–ª–∏—Å—Ç–Ω—ã–π',
    age: 15,
    crownDiameter: 4.5,
    height: 12,
    damages: '–ù–µ–±–æ–ª—å—à–æ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –∫–æ—Ä—ã',
    healthStatus: 'satisfactory',
    position: [51.533562, 46.034266]
  },
  {
    id: '2',
    type: 'tree',
    species: '–õ–∏–ø–∞ –º–µ–ª–∫–æ–ª–∏—Å—Ç–Ω–∞—è',
    age: 20,
    crownDiameter: 5.2,
    height: 15,
    damages: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
    healthStatus: 'healthy',
    position: [51.535, 46.036]
  },
  {
    id: '3',
    type: 'bush',
    species: '–°–∏—Ä–µ–Ω—å –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è',
    age: 8,
    crownDiameter: 2.1,
    height: 3.5,
    damages: '–°—É—Ö–∏–µ –≤–µ—Ç–≤–∏',
    healthStatus: 'satisfactory',
    position: [51.532, 46.037]
  }
];

const initialLawns: LawnData[] = [
  {
    id: 'lawn1',
    area: 450,
    grassType: '–ú—è—Ç–ª–∏–∫ –ª—É–≥–æ–≤–æ–π',
    healthStatus: 'healthy',
    positions: [
      [51.534, 46.035],
      [51.534, 46.036],
      [51.533, 46.036],
      [51.533, 46.035]
    ]
  },
  {
    id: 'lawn2',
    area: 320,
    grassType: '–û–≤—Å—è–Ω–∏—Ü–∞ –∫—Ä–∞—Å–Ω–∞—è',
    healthStatus: 'satisfactory',
    positions: [
      [51.532, 46.0345],
      [51.532, 46.0355],
      [51.5315, 46.0355],
      [51.5315, 46.0345]
    ]
  }
];

type CreationMode = 'plant' | 'lawn' | null;

const MapClickHandler = ({ 
  mode, 
  onPlantCreate, 
  onLawnPointAdd 
}: { 
  mode: CreationMode;
  onPlantCreate: (position: [number, number]) => void;
  onLawnPointAdd: (position: [number, number]) => void;
}) => {
  useMapEvents({
    click: (e) => {
      const { lat, lng } = e.latlng;
      if (mode === 'plant') {
        onPlantCreate([lat, lng]);
      } else if (mode === 'lawn') {
        onLawnPointAdd([lat, lng]);
      }
    }
  });
  return null;
};

const Index = () => {
  const [plants, setPlants] = useState<PlantData[]>([]);
  const [lawns, setLawns] = useState<LawnData[]>([]);
  const [selectedPlant, setSelectedPlant] = useState<PlantData | null>(null);
  const [selectedLawn, setSelectedLawn] = useState<LawnData | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [creationMode, setCreationMode] = useState<CreationMode>(null);
  const [lawnPoints, setLawnPoints] = useState<[number, number][]>([]);
  const [newPlantType, setNewPlantType] = useState<'tree' | 'bush'>('tree');
  const { toast } = useToast();
  const navigate = useNavigate();

  useEffect(() => {
    const storedPlants = localStorage.getItem('saratov-plants');
    const storedLawns = localStorage.getItem('saratov-lawns');
    
    if (storedPlants) {
      setPlants(JSON.parse(storedPlants));
    } else {
      setPlants(initialPlants);
      localStorage.setItem('saratov-plants', JSON.stringify(initialPlants));
    }

    if (storedLawns) {
      setLawns(JSON.parse(storedLawns));
    } else {
      setLawns(initialLawns);
      localStorage.setItem('saratov-lawns', JSON.stringify(initialLawns));
    }
  }, []);

  const handlePlantClick = (plant: PlantData) => {
    setSelectedPlant(plant);
    setSelectedLawn(null);
    setIsDialogOpen(true);
  };

  const handleLawnClick = (lawn: LawnData) => {
    setSelectedLawn(lawn);
    setSelectedPlant(null);
    setIsDialogOpen(true);
  };

  const handleSavePlant = () => {
    if (!selectedPlant) return;

    const updatedPlants = plants.map(p => 
      p.id === selectedPlant.id ? selectedPlant : p
    );
    setPlants(updatedPlants);
    localStorage.setItem('saratov-plants', JSON.stringify(updatedPlants));
    
    toast({
      title: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
      description: "–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    });
    
    setIsDialogOpen(false);
  };

  const handleSaveLawn = () => {
    if (!selectedLawn) return;

    const updatedLawns = lawns.map(l => 
      l.id === selectedLawn.id ? selectedLawn : l
    );
    setLawns(updatedLawns);
    localStorage.setItem('saratov-lawns', JSON.stringify(updatedLawns));
    
    toast({
      title: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
      description: "–î–∞–Ω–Ω—ã–µ –æ –≥–∞–∑–æ–Ω–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
    });
    
    setIsDialogOpen(false);
  };

  const handleCreatePlant = (position: [number, number]) => {
    const newPlant: PlantData = {
      id: Date.now().toString(),
      type: newPlantType,
      species: newPlantType === 'tree' ? '–ù–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ' : '–ù–æ–≤—ã–π –∫—É—Å—Ç–∞—Ä–Ω–∏–∫',
      age: 0,
      crownDiameter: 0,
      height: 0,
      damages: '',
      healthStatus: 'healthy',
      position
    };
    
    const updatedPlants = [...plants, newPlant];
    setPlants(updatedPlants);
    localStorage.setItem('saratov-plants', JSON.stringify(updatedPlants));
    
    toast({
      title: "–û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω",
      description: `${newPlantType === 'tree' ? '–î–µ—Ä–µ–≤–æ' : '–ö—É—Å—Ç–∞—Ä–Ω–∏–∫'} –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É`
    });
    
    setCreationMode(null);
    setSelectedPlant(newPlant);
    setIsDialogOpen(true);
  };

  const handleAddLawnPoint = (position: [number, number]) => {
    setLawnPoints([...lawnPoints, position]);
    toast({
      title: "–¢–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
      description: `–¢–æ—á–µ–∫ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ: ${lawnPoints.length + 1}`
    });
  };

  const handleCompleteLawn = () => {
    if (lawnPoints.length < 3) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫",
        description: "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∞–∑–æ–Ω–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏",
        variant: "destructive"
      });
      return;
    }

    const newLawn: LawnData = {
      id: Date.now().toString(),
      area: 0,
      grassType: '–ù–æ–≤—ã–π –≥–∞–∑–æ–Ω',
      healthStatus: 'healthy',
      positions: lawnPoints
    };

    const updatedLawns = [...lawns, newLawn];
    setLawns(updatedLawns);
    localStorage.setItem('saratov-lawns', JSON.stringify(updatedLawns));

    toast({
      title: "–ì–∞–∑–æ–Ω —Å–æ–∑–¥–∞–Ω",
      description: "–ì–∞–∑–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É"
    });

    setLawnPoints([]);
    setCreationMode(null);
    setSelectedLawn(newLawn);
    setIsDialogOpen(true);
  };

  const handleCancelCreation = () => {
    setCreationMode(null);
    setLawnPoints([]);
    toast({
      title: "–û—Ç–º–µ–Ω–µ–Ω–æ",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    });
  };

  const handleDeletePlant = () => {
    if (!selectedPlant) return;

    const updatedPlants = plants.filter(p => p.id !== selectedPlant.id);
    setPlants(updatedPlants);
    localStorage.setItem('saratov-plants', JSON.stringify(updatedPlants));

    toast({
      title: "–û–±—ä–µ–∫—Ç —É–¥–∞–ª—ë–Ω",
      description: "–†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —Å –∫–∞—Ä—Ç—ã"
    });

    setIsDialogOpen(false);
    setSelectedPlant(null);
  };

  const handleDeleteLawn = () => {
    if (!selectedLawn) return;

    const updatedLawns = lawns.filter(l => l.id !== selectedLawn.id);
    setLawns(updatedLawns);
    localStorage.setItem('saratov-lawns', JSON.stringify(updatedLawns));

    toast({
      title: "–û–±—ä–µ–∫—Ç —É–¥–∞–ª—ë–Ω",
      description: "–ì–∞–∑–æ–Ω —É–¥–∞–ª—ë–Ω —Å –∫–∞—Ä—Ç—ã"
    });

    setIsDialogOpen(false);
    setSelectedLawn(null);
  };

  return (
    <div className="relative w-screen h-screen">
      <div className="absolute top-6 left-6 z-[1000] bg-white/90 backdrop-blur-sm px-6 py-4 rounded-lg shadow-lg border border-primary/20">
        <h1 className="text-2xl font-bold text-primary flex items-center gap-2">
          <Icon name="Trees" size={28} className="text-primary" />
          –ö–∞—Ä—Ç–∞ –∑–µ–ª—ë–Ω—ã—Ö –Ω–∞—Å–∞–∂–¥–µ–Ω–∏–π –°–∞—Ä–∞—Ç–æ–≤–∞
        </h1>
      </div>

      <div className="absolute top-6 right-6 z-[1000] bg-white/90 backdrop-blur-sm p-4 rounded-lg shadow-lg border border-primary/20 space-y-3">
        {!creationMode ? (
          <>
            <Button 
              onClick={() => setCreationMode('plant')} 
              className="w-full flex items-center gap-2"
            >
              <Icon name="Trees" size={18} />
              –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ
            </Button>
            <Button 
              onClick={() => setCreationMode('lawn')} 
              className="w-full flex items-center gap-2"
              variant="secondary"
            >
              <Icon name="Square" size={18} />
              –î–æ–±–∞–≤–∏—Ç—å –≥–∞–∑–æ–Ω
            </Button>
            <Button 
              onClick={() => navigate('/table')} 
              className="w-full flex items-center gap-2"
              variant="outline"
            >
              <Icon name="Table" size={18} />
              –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä–µ–∫—Ç–æ–≤
            </Button>
          </>
        ) : creationMode === 'plant' ? (
          <div className="space-y-3">
            <Badge className="w-full justify-center py-2">
              <Icon name="MapPin" size={16} className="mr-2" />
              –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ
            </Badge>
            <div className="flex gap-2">
              <Button 
                size="sm"
                variant={newPlantType === 'tree' ? 'default' : 'outline'}
                onClick={() => setNewPlantType('tree')}
                className="flex-1"
              >
                üå≥
              </Button>
              <Button 
                size="sm"
                variant={newPlantType === 'bush' ? 'default' : 'outline'}
                onClick={() => setNewPlantType('bush')}
                className="flex-1"
              >
                üåø
              </Button>
            </div>
            <Button 
              onClick={handleCancelCreation} 
              variant="destructive" 
              size="sm" 
              className="w-full"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
          </div>
        ) : (
          <div className="space-y-3">
            <Badge className="w-full justify-center py-2">
              <Icon name="MapPin" size={16} className="mr-2" />
              –¢–æ—á–µ–∫: {lawnPoints.length}
            </Badge>
            <Button 
              onClick={handleCompleteLawn} 
              disabled={lawnPoints.length < 3}
              size="sm" 
              className="w-full"
            >
              –ó–∞–≤–µ—Ä—à–∏—Ç—å
            </Button>
            <Button 
              onClick={handleCancelCreation} 
              variant="destructive" 
              size="sm" 
              className="w-full"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
          </div>
        )}
      </div>

      <MapContainer 
        center={[51.533562, 46.034266]} 
        zoom={16} 
        style={{ height: '100vh', width: '100vw' }}
        className="z-0"
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />

        {plants.map(plant => (
          <Marker 
            key={plant.id}
            position={plant.position}
            icon={createPlantIcon(plant.type, plant.healthStatus)}
            eventHandlers={{
              click: () => handlePlantClick(plant)
            }}
          >
            <Popup>
              <div className="font-roboto">
                <strong>{plant.species}</strong>
                <br />
                –í–æ–∑—Ä–∞—Å—Ç: {plant.age} –ª–µ—Ç
              </div>
            </Popup>
          </Marker>
        ))}

        {lawns.map(lawn => (
          <Polygon
            key={lawn.id}
            positions={lawn.positions}
            pathOptions={{
              color: getHealthColor(lawn.healthStatus),
              fillColor: getHealthColor(lawn.healthStatus),
              fillOpacity: 0.3,
              weight: 3
            }}
            eventHandlers={{
              click: () => handleLawnClick(lawn)
            }}
          >
            <Popup>
              <div className="font-roboto">
                <strong>–ì–∞–∑–æ–Ω</strong>
                <br />
                –ü–ª–æ—â–∞–¥—å: {lawn.area} –º¬≤
              </div>
            </Popup>
          </Polygon>
        ))}

        {lawnPoints.length > 0 && (
          <Polygon
            positions={lawnPoints}
            pathOptions={{
              color: '#2D5016',
              fillColor: '#beee90',
              fillOpacity: 0.4,
              weight: 2,
              dashArray: '10, 10'
            }}
          />
        )}

        <MapClickHandler 
          mode={creationMode} 
          onPlantCreate={handleCreatePlant}
          onLawnPointAdd={handleAddLawnPoint}
        />
      </MapContainer>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="max-w-md max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-primary">
              {selectedPlant ? '–ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞–∑–æ–Ω–µ'}
            </DialogTitle>
          </DialogHeader>

          {selectedPlant && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="species">–í–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è</Label>
                <Input
                  id="species"
                  value={selectedPlant.species}
                  onChange={(e) => setSelectedPlant({...selectedPlant, species: e.target.value})}
                />
              </div>

              <div>
                <Label htmlFor="age">–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)</Label>
                <Input
                  id="age"
                  type="number"
                  value={selectedPlant.age}
                  onChange={(e) => setSelectedPlant({...selectedPlant, age: parseInt(e.target.value) || 0})}
                />
              </div>

              <div>
                <Label htmlFor="crownDiameter">–î–∏–∞–º–µ—Ç—Ä –∫—Ä–æ–Ω—ã (–º)</Label>
                <Input
                  id="crownDiameter"
                  type="number"
                  step="0.1"
                  value={selectedPlant.crownDiameter}
                  onChange={(e) => setSelectedPlant({...selectedPlant, crownDiameter: parseFloat(e.target.value) || 0})}
                />
              </div>

              <div>
                <Label htmlFor="height">–í—ã—Å–æ—Ç–∞ (–º)</Label>
                <Input
                  id="height"
                  type="number"
                  step="0.1"
                  value={selectedPlant.height}
                  onChange={(e) => setSelectedPlant({...selectedPlant, height: parseFloat(e.target.value) || 0})}
                />
              </div>

              <div>
                <Label htmlFor="damages">–ù–∞–ª–∏—á–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π</Label>
                <Textarea
                  id="damages"
                  value={selectedPlant.damages}
                  onChange={(e) => setSelectedPlant({...selectedPlant, damages: e.target.value})}
                />
              </div>

              <div>
                <Label htmlFor="healthStatus">–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è</Label>
                <Select
                  value={selectedPlant.healthStatus}
                  onValueChange={(value: 'healthy' | 'satisfactory' | 'unsatisfactory') => 
                    setSelectedPlant({...selectedPlant, healthStatus: value})
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="healthy">–ó–¥–æ—Ä–æ–≤–æ–µ</SelectItem>
                    <SelectItem value="satisfactory">–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ</SelectItem>
                    <SelectItem value="unsatisfactory">–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex gap-2 pt-4">
                <Button onClick={handleSavePlant} className="flex-1">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </Button>
                <Button onClick={() => setIsDialogOpen(false)} variant="outline" className="flex-1">
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>
              </div>
              
              <div className="pt-2 border-t">
                <Button 
                  onClick={handleDeletePlant} 
                  variant="destructive" 
                  className="w-full flex items-center gap-2"
                >
                  <Icon name="Trash2" size={16} />
                  –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç
                </Button>
              </div>
            </div>
          )}

          {selectedLawn && (
            <div className="space-y-4">
              <div>
                <Label htmlFor="area">–ü–ª–æ—â–∞–¥—å (–∫–≤. –º)</Label>
                <Input
                  id="area"
                  type="number"
                  value={selectedLawn.area}
                  onChange={(e) => setSelectedLawn({...selectedLawn, area: parseInt(e.target.value) || 0})}
                />
              </div>

              <div>
                <Label htmlFor="grassType">–¢–∏–ø —Ç—Ä–∞–≤—ã</Label>
                <Input
                  id="grassType"
                  value={selectedLawn.grassType}
                  onChange={(e) => setSelectedLawn({...selectedLawn, grassType: e.target.value})}
                />
              </div>

              <div>
                <Label htmlFor="lawnHealthStatus">–°–æ—Å—Ç–æ—è–Ω–∏–µ</Label>
                <Select
                  value={selectedLawn.healthStatus}
                  onValueChange={(value: 'healthy' | 'satisfactory' | 'unsatisfactory') => 
                    setSelectedLawn({...selectedLawn, healthStatus: value})
                  }
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="healthy">–ó–¥–æ—Ä–æ–≤–æ–µ</SelectItem>
                    <SelectItem value="satisfactory">–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ</SelectItem>
                    <SelectItem value="unsatisfactory">–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex gap-2 pt-4">
                <Button onClick={handleSaveLawn} className="flex-1">
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                </Button>
                <Button onClick={() => setIsDialogOpen(false)} variant="outline" className="flex-1">
                  –ó–∞–∫—Ä—ã—Ç—å
                </Button>
              </div>

              <div className="pt-2 border-t">
                <Button 
                  onClick={handleDeleteLawn} 
                  variant="destructive" 
                  className="w-full flex items-center gap-2"
                >
                  <Icon name="Trash2" size={16} />
                  –£–¥–∞–ª–∏—Ç—å –≥–∞–∑–æ–Ω
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Index;